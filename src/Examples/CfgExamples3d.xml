<?xml version='1.0' encoding='UTF-8'?>
<MotionPlanning warnings="true" warningsAsErrors="true" print="false">

  <!-- Here we specify input files, such as environment and query. -->
  <Problem>

    <Environment filename="ZigZag/zigzagoriginal-pmpl.env"/>

    <Robot label="boxy" filename="ZigZag/boxy_original.robot"/>


    <!-- WARNING Support for multiple constraints is not yet implemented! -->
    <!-- WARNING Workspace constraints are not finished and untested! -->
    <!-- WARNING CSpace bounding box constraints are supported, but currently
         the query method will just use the bounding box to sample a specific
         goal configuration. -->

    <Task label="query" robot="boxy">
      <StartConstraints>
        <CSpaceConstraint point="-8.26667 15.7333"/> <!---8.26667 15.7333-->
      </StartConstraints>

      <GoalConstraints>
        <CSpaceConstraint point="0.26667 -14.6667"/><!--0.26667 -14.6667-->
      </GoalConstraints>

    </Task>

  </Problem>

  <!-- Set available algorithms and parameters. -->
  <Library>

    <DistanceMetrics>
      <Euclidean label="euclidean"/>
      <ScaledEuclidean label= "scaledEuclidean" scale ="0.5"/>
      <CenterOfMass label="com"/>
      <KnotTheory label="knot"/>
      <Manhattan label="manhattan"/>
      <Minkowski label="minkowski" r1="3.0" r2="3.0" r3="0.333"
                 normalize="false"/>
      <RMSD label="rmsd"/>
      <LPSwept label="LPSwept" posRes="5" oriRes="5" useBBox="true" lpLabel="sl"/>
      <BinaryLPSwept label="BLPSwept" posRes="5" oriRes="5" useBBox="true"
                     lpLabel="sl"/>
    </DistanceMetrics>

    <ValidityCheckers>
      <CollisionDetection label="rapid" method="RAPID"/>
      <CollisionDetection label="pqp" method="PQP"/>
      <CollisionDetection label="pqp_solid" method="PQP_SOLID"/>
      <NodeClearanceValidity label="nc" delta="0.3" nfLabel="Nearest"/>
      <NegateValidity label="nv" vcLabel="rapid"/>
      <MedialAxisClearance label="mac" maClearance="0.5" vcLabel="pqp_solid"
                           dmLabel="euclidean" clearanceType="exact" penetrationType="exact"
                           useBBX="true" positional="true"/>
      <ComposeValidity label="cv" operator="AND">
        <ValidityChecker label="pqp_solid"/>
        <ValidityChecker label="mac"/>
      </ComposeValidity>
      <AlwaysTrueValidity label="alwaysTrue"/>
      <ObstacleClearance label="oc" obstClearance="2.5" vcLabel="pqp_solid"
                         dmLabel="euclidean" clearanceType="exact" penetrationType="exact"
                         useBBX="true" positional="true"/>
    </ValidityCheckers>

    <NeighborhoodFinders>
      <BruteForceNF label="BFNF" dmLabel="euclidean" unconnected="false" k="10"/>
      <BruteForceNF label="Nearest" dmLabel="euclidean" unconnected="false"
                    k="1"/>
      <BruteForceNF label="BFNFAll" dmLabel="euclidean" k="0"/>
      <HierarchicalNF label="HierarchicalNF" nfLabel="BFNF" nfLabel2="RandomNF"
                      dmLabel=""/>
      <HopLimitNF label="HLNF" hoplimit="2" dmLabel="" nfLabel="BFNF"/>
      <OptimalNF label="OptimalK" nfLabel="BFNF"/>
      <RadiusNF label="RadiusNF" dmLabel="euclidean" radius="7.6"/><!-->for robot<-->
      <RadiusNF label="RadiusNF1" dmLabel="euclidean" radius="7.6"/><!-->for obstacles density<-->
      <!--<RadiusNF label="RadiusNF2" dmLabel="euclidean" radius="2.4"/> -->
      <RandomNF label="RandomNF" dmLabel="euclidean" k="5"/>
      <DPESNF label="DPESNF" dmLabel="euclidean" k="5" m="3"/>
      <!--MPNNNF label="BFNF" dmLabel="euclidean" use_rotational="0"
           use_scaling="0"/-->
      <BandsNF label="RbandNF_2bands_4k" debug="false" dmLabel="euclidean">
        <RBand label="first" max = '8' k='8' policy='closest'
               dmLabel="euclidean"/>
        <RBand label="second" min = '8' max = '64' k='8' policy='random'
               dmLabel="euclidean"/>
      </BandsNF>
      <BandsNF label="DbandNF" debug="false" dmLabel="euclidean">
        <DBand label="first" min='.1' max='.3' k='16' policy='closest'
               dmLabel="euclidean"/>
      </BandsNF>
    </NeighborhoodFinders>

    <Samplers>
      <UniformRandomSampler label="UniformRandom" vcLabel="alwaysTrue"/>
      <UniformRandomSampler label="UniformRandomFree" vcLabel="rapid"/>
      <ObstacleBasedSampler label="OBPRM" vcLabel="rapid" useBBX="false"
                            pointSelection="cspace" dmLabel="euclidean" stepSize="0.0"
                            nShellsColl="0" nShellsFree="1" debug="false"/>
      <GaussianSampler label="Gauss" vcLabel="rapid" d="0.2" dmLabel="euclidean"
                       useBBX="false"/>
      <BridgeTestSampler label="Bridge" vcLabel="rapid" d="0.2"
                         dmLabel="euclidean" useBBX="true"/>
      <MedialAxisSampler label="MAPRM" vcLabel="pqp_solid" dmLabel="euclidean"
                         clearanceType="exact" penetrationType="exact"
                         useBBX="true" debug="false" positional="true"/>
      <GridSampler label="Grid" vcLabel="rapid">
        <Dimension index="0" points="10"/>
        <Dimension index="1" points="5"/>
        <Dimension index="2" points="5"/>
      </GridSampler>
      <MixSampler label="MixSampler">
        <Sampler label="UniformRandomFree" p="0.8"/>
        <Sampler label="UniformRandom" p="0.2"/>
      </MixSampler>
      <UniformObstacleBasedSampler label="UOBPRM" vcLabel="nv" useBBX="false" keepCollide="true"
                                   dmLabel="euclidean" d="0.1" />
      <UniformMedialAxisSampler label="UMAPRM" vcLabel="pqp_solid" useBBX="true"
                                dmLabel="euclidean" d="2.00" t="10" clearanceType="exact"
                                penetrationType="exact" debug="false" positional="true"/>
      <WorkspaceImportanceSampler label="WIS" vcLabel="rapid" alpha="0.2"/>
    </Samplers>

    <LocalPlanners>
      <StraightLine label="sl" binaryEvaluation="true" vcLabel="rapid"/>
      <StraightLine label="slAlwaysTrue" binaryEvaluation="true"
                    vcLabel="alwaysTrue"/>
      <RotateAtS label="ras" binaryEvaluation="true" vcLabel="rapid" s="0.5"
                 saveIntermediates="false"/>
      <TransformAtS label="tas" binaryEvaluation="true" vcLabel="rapid" s="0.5"
                    saveIntermediates="false"/>
      <AStarDistance label="asd" vcLabel="rapid" dmLabel="euclidean"
                     maxTries="6" numNeighbors="10" histLength="10" debug="true"/>
      <AStarClearance label="asc" vcLabel="pqp_solid" maxTries="6" numNeighbors="3"
                      histLength="10" dmLabel="euclidean" clearanceType="exact"
                      penetrationType="exact" useBBX="true" positional="true" debug="false"/>
      <MedialAxisLP label="malpr" controller="recursive"
                    macEpsilon="0.1" maxIter="10"
                    vcLabel="pqp_solid" dmLabel="euclidean"
                    clearanceType="exact" penetrationType="exact" useBBX="true"
                    positional="true"
                    debug="true" saveIntermediates="true"/>
      <MedialAxisLP label="malpi" controller="iterative"
                    resFactor="20" maxIter="100"
                    vcLabel="pqp_solid" dmLabel="euclidean"
                    clearanceType="exact" penetrationType="exact" useBBX="true"
                    positional="true"
                    debug="true" saveIntermediates="true"/>
      <MedialAxisLP label="malpb" controller="binary"
                    resFactor="20" maxIter="100"
                    vcLabel="pqp_solid" dmLabel="euclidean"
                    clearanceType="exact" penetrationType="exact" useBBX="true"
                    positional="true"
                    debug="true" saveIntermediates="true"/>
      <ToggleLP label="togglelp" vcLabel="rapid" dmLabel="euclidean"
                lpLabel="sl" maxIter="5"/>
      <ApproxSpheres label="apsph" vcLabel="pqp_solid" dmLabel="euclidean"
                     saveIntermediates="false" clearanceType="exact"
                     penetrationType="exact"/>
      <HierarchicalLP label="hlp">
        <LocalPlanner method="sl"/>
        <LocalPlanner method="ras"/>
        <LocalPlanner method="malp"/>
      </HierarchicalLP>
    </LocalPlanners>

    <Extenders>
      <BasicExtender label="BERO" debug="false" dmLabel="euclidean"
                     vcLabel="rapid" maxDist="1." minDist=".001"/>
      <BasicExtender label="BESO" debug="false" dmLabel="euclidean"
                     vcLabel="rapid" maxDist="10." minDist=".001" randomOrientation="false"/>
      <KinodynamicExtender label="KinoExtender" debug="false"
                           dmLabel="euclidean" vcLabel="rapid" fixed="false" best="true"
                           numSteps="10" minDist=".01"/>
      <MedialAxisExtender label="MAE" maxDist="10.0" minDist="0.01"
                          extendDist="0.5" maxIntermediates="10" lpLabel="sl" vcLabel="pqp_solid"
                          dmLabel="euclidean" clearanceType="exact" penetrationType="exact"
                          useBBX="true" positional="true"/>
      <RandomObstacleVector label="ROVRO" debug="false" dmLabel="euclidean"
                            vcLabel="rapid" maxDist="10.0" minDist=".001"/>
      <RandomObstacleVector label="ROVSO" debug="false" dmLabel="euclidean"
                            vcLabel="rapid" maxDist="10.0" minDist=".001" randomOrientation="false"/>
      <RotationThenTranslation label="RTT" debug="false" dmLabel="euclidean"
                               vcLabel="rapid" maxDist="10.0" minDist=".001"/>
      <TraceCSpaceObstacle label="TCSO" debug="false" dmLabel="euclidean"
                           vcLabel="rapid" maxDist="10.0" minDist=".001"/>
      <TraceMAPush label="TMAP" debug="false" dmLabel="euclidean" vcLabel="rapid"
                   maxDist="10.0" minDist=".001" clearanceType="exact"
                   penetrationType="exact"/>
      <TraceObstacle label="TORO" debug="false" dmLabel="euclidean"
                     vcLabel="rapid" maxDist="10.0" minDist=".001"/>
      <TraceObstacle label="TOSO" debug="false" dmLabel="euclidean"
                     vcLabel="rapid" maxDist="10.0" minDist=".001" randomOrientation="false"/>
      <MixExtender label="ME">
        <Extender label="BERO" probability="0.1"/>
        <Extender label="BESO" probability="0.1"/>
        <Extender label="ROVRO" probability="0.1"/>
        <Extender label="ROVSO" probability="0.1"/>
        <Extender label="RTT" probability="0.1"/>
        <Extender label="TORO" probability="0.1"/>
        <Extender label="TOSO" probability="0.1"/>
        <Extender label="TCSO" probability="0.1"/>
        <Extender label="TMAP" probability="0.1"/>
      </MixExtender>
    </Extenders>

    <PathModifiers>
      <CombinedPathModifier label="CombinedPathModifier" debug="true">
        <Modifier label="ShortcuttingPathModifier"/>
        <Modifier label="MedialAxisPathModifier"/>
        <Modifier label="ResamplePathModifier"/>
      </CombinedPathModifier>
      <CRetractionPathModifier label="CR" iter="25"
                               vcLabel="pqp_solid" dmLabel="euclidean"
                               clearanceType="exact" penetrationType="exact"
                               useBBX="true" positional="true" debug="false"/>
      <MedialAxisPathModifier label="MAPS"
                              pmLabel="SC" lpLabel="sl" malpLabel="malpi" debug="false"/>
      <ResamplePathModifier label="ResamplePathModifier" debug="false"
                            typeName="MAX_CLEARANCE" numResamples="1" stepSize="0.3" userValue="0.3"
                            vcLabel="pqp_solid" dmLabel="euclidean" lpLabel="sl" clearanceType="exact"
                            penetrationType="exact" useBBX="true" positional="true"/>
      <ShortcuttingPathModifier label="ShortcuttingPathModifier" lpLabel="sl"
                                debug="false"/>
    </PathModifiers>

    <Connectors>
      <AdaptiveConnector label="AdaptiveCS" nfLabel="" lpLabel="sl"
                         percentRandom="0.5" checkIfSameCC="false" debug="false"
                         uniformProbability="false" fixedCost="false" fixedReward="false">
        <NeighborFinder Method="BFNF"/>
        <NeighborFinder Method="Nearest"/>
        <NeighborFinder Method="RandomNF"/>
        <NeighborFinder Method="BFNFAll"/>
      </AdaptiveConnector>
      <CCsConnector label="ConnectCCs" nfLabel="BFNF" lpLabel="sl" k="5"/>
      <!--ClosestVE label="ClosestVE" kClosest="3" nfLabel="BFNF"
           lpLabel="sl"/-->
      <!--NeighborhoodConnector label="Closest" nfLabel="BFNF" lpLabel="sl"
        checkIfSameCC="false" debug="false"/-->
      <NeighborhoodConnector label="Closest" nfLabel="RadiusNF" lpLabel="sl"
                             checkIfSameCC="false" debug="false"/>
      <NeighborhoodConnector label="SparkPRMConnector" nfLabel="Nearest"
                             lpLabel="sl" checkIfSameCC="true"/>
      <NeighborhoodConnector label="ToggleConnect" nfLabel="BFNF" lpLabel="sl"
                             countFailures="true" fail="1" checkIfSameCC="false"/>
      <NeighborhoodConnector label="ClosestAlwaysTrue" nfLabel="BFNF"
                             lpLabel="slAlwaysTrue" checkIfSameCC="false"/>
      <NeighborhoodConnector label="AllToAll" nfLabel="BFNFAll" lpLabel="sl"
                             checkIfSameCC="false"/>
      <RewireConnector label="OptimalRewire" nfLabel="OptimalK" lpLabel="sl"/>
    </Connectors>

    <Metrics>
      <NumNodesMetric label="NumNodes"/>
      <NumEdgesMetric label="NumEdges"/>
      <DiameterMetric label="Diameter"/>
      <CCDistanceMetric label="CCDistance" dmLabel="euclidean"/>
      <TimeMetric label="TimeInSec"/>
    </Metrics>

    <MapEvaluators>

      <TrueEvaluation label="TrueEvaluator" />
      <PRMQuery label="PRMQuery" debug="false">
        <NodeConnectionMethod method="Closest"/>
      </PRMQuery>
<!--      <MorseQuery label="MorseQuery" debug="false" agent="ZigZag/boxy_original.robot" agentPath="newDpaths.paths" vcLabel="RAPID">-->
<!--        <NodeConnectionMethod method="Closest"/>-->
<!--      </MorseQuery>-->
      <MorseQuery label="MorseQuery" debug="false" r_speed="3" numAgents="12" numPaths="10" agent="ZigZag/boxy_original.robot" agentRdmp="wait_boxy.map" cdMethod="RAPID">
        <NodeConnectionMethod method="Closest"/>
      </MorseQuery>
      <RRTQuery label="RRTQuery" goalDist="0"
                nfLabel="Nearest" exLabel="BERO" debug="false"/>
      <RRTQuery label="KinoRRTQuery" goalDist=".3"
                nfLabel="Nearest" exLabel="KinoExtender" debug="false"/>
      <LazyQuery label="LazyQuery"
                 lpLabel="sl" dmLabel="euclidean" vcMethod="rapid" graphSearchAlg="astar"
                 debug="false" numEnhance="10" d="0.5">
        <NodeConnectionMethod method="ClosestAlwaysTrue"/>
        <Resolution mult="27"/>
        <Resolution mult="16"/>
        <Resolution mult="1"/>
      </LazyQuery>
      <LazyToggleQuery label="LazyToggleQuery"
                       lpLabel="sl" dmLabel="euclidean" vcMethod="rapid" graphSearchAlg="astar"
                       iterative="true" debug="false">
        <NodeConnectionMethod method="ClosestAlwaysTrue"/>
        <ToggleConnectionMethod method="LazyToggleConnect"/>
        <Resolution mult="27"/>
        <Resolution mult="16"/>
        <Resolution mult="1"/>
      </LazyToggleQuery>
      <PrintMapEvaluation label="PrintMap" base_name="Basic"/>
      <ConditionalEvaluator label="NodesEval" metric_method="NumNodes"
                            value="1000" operator=">="/>
      <ConditionalEvaluator label="EdgesEval" metric_method="NumEdges"
                            value="1000" operator=">"/>
      <ConditionalEvaluator label="FreqNodeEval" metric_method="NumNodes"
                            value="50" operator="%"/>
      <NegateEvaluator label="Neg" evalLabel="NodesEval"/>
      <ComposeEvaluator label="BoundedQuery" operator="or">
        <Evaluator label="NodesEval"/>
        <Evaluator label="PRMQuery"/>
      </ComposeEvaluator>
      <ComposeEvaluator label="BoundedRRTQuery" operator="or">
        <Evaluator label="NodesEval"/>
        <Evaluator label="RRTQuery"/>
      </ComposeEvaluator>
      <ComposeEvaluator label="ModQuery" operator="and">
        <Evaluator label="FreqNodeEval"/>
        <Evaluator label="PRMQuery"/>
      </ComposeEvaluator>
    </MapEvaluators>

    <MPStrategies>

      <!-- Basic PRM where num samples is based on Number -->
      <BasicPRM label="BasicPRM1">
        <Sampler method="UniformRandomFree" number="100" attempts="10"/>
        <!--Sampler Method="Gauss" number="10" attempts="10"/-->
        <!--Sampler Method="OBPRM" number="10" attempts="10"/-->
        <!--Sampler Method="MAPRM" number="10" attempts="10"/-->
        <Connector method="Closest"/>
        <!--ComponentConnector method="ConnectCCs"/-->
        <Evaluator method="PRMQuery"/>
      </BasicPRM>

      <!-- Basic PRM restarted from an input roadmap input.map at the beginning
           of node connection -->
      <BasicPRM label="BasicPRM2"
                inputMap="input.map" startAt="connecting">
        <Sampler method="UniformRandomFree" number="10" attempts="10"/>
        <Connector method="Closest"/>
        <ComponentConnector method="ConnectCCs"/>
        <Evaluator method="NodesEval"/>
      </BasicPRM>

      <!-- PRM* -->
      <BasicPRM label="OptimalPRM">
        <Sampler method="UniformRandomFree" number="100" attempts="100"/>
        <Connector method="OptimalConnector"/>
        <Evaluator method="NodesEval"/>
      </BasicPRM>

      <!-- BasicRRT -->
      <BasicRRTStrategy label="BasicRRT"
                        numRoots="1" m="1" growthFocus="0.01" dmLabel="euclidean"
                        nfLabel="Nearest" vcLabel="rapid" connectorLabel="Closest"
                        gtype="UNDIRECTED_TREE" debug="false"
                        growGoals="true" extenderLabel="BERO">
        <Evaluator label="RRTQuery"/>
      </BasicRRTStrategy>

      <!-- Kindodynamic RRT -->
      <BasicRRTStrategy label="KinoRRT"
                        numRoots="1" m="1" growthFocus="0.01" dmLabel="euclidean"
                        nfLabel="Nearest" vcLabel="rapid" connectorLabel="Closest"
                        gtype="DIRECTED_TREE" debug="false"
                        growGoals="false" extenderLabel="KinoExtender">
        <Evaluator label="KinoRRTQuery"/>
      </BasicRRTStrategy>

      <!-- If optimal connection is wanted, the correct connector needs to be
           selected -->
      <BasicRRTStrategy label="RRG"
                        numRoots="1" m="1" growthFocus="0.01" dmLabel="euclidean"
                        nfLabel="Nearest" vcLabel="rapid" extenderLabel="BERO"
                        connectorLabel="OptimalConnector" gtype="UNDIRECTED_GRAPH">
        <Evaluator label="NodesEval"/>
      </BasicRRTStrategy>

      <!-- The connector needs to be OptimalRewire for RRT* -->
      <BasicRRTStrategy label="RRTstar"
                        numRoots="1" m="1" growthFocus="0.01" dmLabel="euclidean"
                        nfLabel="Nearest" vcLabel="rapid" extenderLabel="BERO"
                        connectorLabel="OptimalRewire" gtype="UNDIRECTED_GRAPH">
        <Evaluator label="NodesEval"/>
      </BasicRRTStrategy>

      <SRTStrategy label="SRT"
                   lpLabel="sl" dmLabel="euclidean" nfLabel="Nearest"
                   vcLabel="rapid" exLabel="BERO" debug="false" samples="5"
                   expansions="10" closeCent="1" randCent="2" closePairs="2" connIter="5">
        <Evaluator label="ModQuery"/>
      </SRTStrategy>

      <BasicRRTStrategy label="OBRRT"
                        numRoots="1" m="1" growthFocus="0.01" dmLabel="euclidean"
                        nfLabel="Nearest" vcLabel="rapid" connectorLabel="Closest"
                        gtype="UNDIRECTED_TREE" debug="false"
                        growGoals="true" extenderLabel="ME">
        <Evaluator label="NodesEval"/>
      </BasicRRTStrategy>

      <!-- Adaptive RRT -->
      <AdaptiveRRT label="AdaptiveRRT"
                   numRoots="1" growthFocus="0.01" dmLabel="euclidean"
                   nfLabel="BFNF" vcLabel="rapid" extenderLabel="BERO"
                   gtype="UNDIRECTED_TREE" gamma="0.1" cost="reward" debug="true">
        <Evaluator label="NodesEval"/>
        <GrowthSet threshold="0.0">
          <Extender label="BERO"/>
          <Extender label="BESO"/>
          <Extender label="ROVRO"/>
        </GrowthSet>
      </AdaptiveRRT>

      <!-- DynamicDomainRRT -->
      <DynamicDomainRRT label="DynamicDomainRRT"
                        growthFocus="0.01" dmLabel="euclidean" nfLabel="Nearest" vcLabel="rapid"
                        gtype="UNDIRECTED_TREE" debug="false" growGoals="false"
                        extenderLabel="BERO" r="2">
        <Evaluator label="BoundedRRTQuery"/>
      </DynamicDomainRRT>

      <!-- DynamicRegionRRT -->
      <DynamicRegionRRT label="DynamicRegionRRT"
                        growthFocus="0.01" dmLabel="euclidean"
                        nfLabel="Nearest" vcLabel="rapid"
                        gtype="UNDIRECTED_TREE" debug="false"
                        growGoals="false" extenderLabel="BERO" inputSkeleton="2DS/path.graph">
        <Evaluator label="RRTQuery"/>
      </DynamicRegionRRT>


      <!-- Toggle PRM -->
      <TogglePRMStrategy label="TogglePRM" priority="true">
        <Sampler methodLabel="UniformRandomFree" number="10" attempts="1"/>
        <Connector methodLabel="Closest"/>
        <ColConnector methodLabel="ToggleConnect"/>
        <Evaluator methodLabel="PRMQuery"/>
      </TogglePRMStrategy>



      <!-- EvaluateMapStrategy -->
      <EvaluateMapStrategy label="EvaluateMapStrategy" mapFilename="3D/3d.map">
        <Evaluator label="NodesEval"/>
      </EvaluateMapStrategy>

      <UtilityGuidedGenerator label="UtilityGuided" vcLabel="rapid" nfLabel="BFNF"
                              connectorLabel="Closest">
        <Evaluator label="NodesEval"/>
      </UtilityGuidedGenerator>

      <!-- Push Query to MA -->
      <PushQueryToMA label="PushQueryToMA"
                     inFilename="3D/3d.query" outFilename="3D/3d.ma.query"
                     vcLabel="pqp_solid" dmLabel="euclidean"
                     clearanceType="exact" penetrationType="exact" useBBX="true"
                     positional="true"/>

      <!-- Medial Axis -->
      <MedialAxisTest label="TestMedial" space="1"/>

      <!-- Modify Path -->
      <ModifyPath label="ModifyPath" pmLabel="CR" pathFile="3D/3d.path"/>


      <!-- MultiStrategy -->
      <MultiStrategy label="MultiStrategy">
        <MPStrategy method="BasicPRM1"/>
        <MPStrategy method="AdaptiveRRT"/>
      </MultiStrategy>



      <!-- Spark PRM Examples -->
      <SparkTogglePRMStrategy label="SparkToggle" maxNPCCSize="2"
                              initSamples="10" maxRRTSize="100" attemptRatio="10" delta="5"
                              minDist="0.1" vcLabel="rapid" nfLabel="BFNF" nfVertexLabel="Nearest"
                              trimDepth="2" dmLabel="euclidean" cLabel="SparkPRMConnector"
                              eLabel="BERO" priority="false" growthFocus="0.25" checkEdgeCases="true"
                              checkImportant="true" trimAll="true" biasConnect="true"
                              rrtDebug="false">
        <Sampler methodLabel="UniformRandomFree" number="10" attempts="10"/>
        <Connector methodLabel="ToggleConnect"/>
        <ColConnector methodLabel="ToggleConnect"/>
        <Evaluator methodLabel="ModQuery"/>
      </SparkTogglePRMStrategy>

      <SparkBasicPRM label="SparkUniform" maxNPCCSize="2" initSamples="10"
                     maxRRTSize="100" attemptRatio="10" delta="5" minDist="0.1" vcLabel="rapid"
                     nfLabel="BFNF" nfVertexLabel="Nearest" trimDepth="2" dmLabel="euclidean"
                     cLabel="SparkPRMConnector" eLabel="BERO" growthFocus="0.25"
                     checkEdgeCases="true" checkImportant="true" trimAll="true"
                     biasConnect="true" rrtDebug="false">
        <Sampler method="UniformRandomFree" number="10" attempts="10"/>
        <Connector method="Closest"/>
        <Evaluator method="ModQuery"/>
      </SparkBasicPRM>



      <!-- Visibility Based PRM Strategy -->
      <VisibilityBasedPRM label="VBPRM" sampler="UniformRandomFree"
                          vcLabel="rapid" lpLabel="sl"
                          maxFailedIterations="20" debug="false"/>

      <!-- Primitive  Tree test -->
      <PrimitiveSkeletonTestStrategy label="TestPrimitives" dimension="2" concentric="1.2" simplification="0.2" space="1" filebase="zigzag-free"/>

      <!-- EST strategy -->
      <EST label="EST"
           numRoots="1" m="1" growthFocus="0.01" dmLabel="euclidean"
           nfLabel="Nearest" vcLabel="rapid" connectorLabel="Closest"
           gtype="UNDIRECTED_TREE" debug="false"
           growGoals="true" extenderLabel="BERO">
        <Evaluator label="RRTQuery"/>
      </EST>

      <!--VRhomotopy and morse function-->
      <VRhomotopy label="VRhomotopy">
        <Sampler method="UniformRandomFree" number="100" attempts="10"/>
        <!--Evaluator method="NodesEval"/-->
      </VRhomotopy>

      <MorseFunction label="MorseFunction" total="10000" inputMap="wait_boxy.map" obstNF="RadiusNF1">
        <Sampler method="UniformRandomFree" number="1000" attempts="10"/>
        <Connector method="Closest"/>
        <Evaluator method="MorseQuery"/>
      </MorseFunction>

    </MPStrategies>

    <MPTools>
      <ClearanceUtility label="clearanceUtil" vcLabel="pqp_solid"
                        dmLabel="euclidean" clearanceType="exact" penetrationType="exact"
                        useBBX="true" positional="true"/>

      <MedialAxisUtility label="maUtil" vcLabel="pqp_solid"
                         dmLabel="euclidean" clearanceType="exact" penetrationType="exact"
                         useBBX="true" positional="true"/>

      <ReebGraphConstruction debug="false" write="false" filename=""/>

      <TetGenDecomposition debug="false" switches="pnQ"
                           writeFreeModel="false" writeDecompModel="false"
                           decompModelFilename=""/>


    </MPTools>

    <!-- MPProblem allows multiple solvers to be specified and executed. -->

    <Solver mpStrategyLabel="MorseFunction" seed="12345678"
            baseFilename="MorseFunction_social_nav_boxy" vizmoDebug="true"/>

  </Library>

</MotionPlanning>
